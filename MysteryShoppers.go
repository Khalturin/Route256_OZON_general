package main

import (
	"fmt"
	"sync"
)

/*
Тайные покупатели
Условия
	Паша и Саша проживают в большом подмосковном городе, в котором существует N районов. Не так давно два друга решили
	стать тайными покупателями в Озоне. Они решили подойти к делу очень ответственно, поэтому очень хотят обойти все
	пункты выдачи, посовещаться и выбрать самый лучший. В каждом районе города есть только одна точка выдачи.
	Внимательно изучив карту города, ребята поняли, что проверить все пункты у них физически не получится, уж очень
	далеко им ходить придется, поэтому они решили ограничиться количеством путешествий, равным количеству всех возможных
	вариантов обхода, взятому по модулю T, а также решили позвать на помощь M друзей, которые будут параллельно обходить
	точки. При этом каждому из друзей выделено разное подмножество пунктов выдачи: N1, N2, ..., Nm .
	Найдите количество вариантов обходов всех пунктов выдачи в произвольном порядке.

	Примечание: Паша и Саша ходят вместе, а друзья поодиночке.

Формат входных данных
	В первой строке вводится число М(1<=М<1000)
	Далее, на вход поступает M+1 строк, каждая из которых содержит два целых числа N и T (1<=n<=10^18, 1<=T<=10000000)

Формат выходных данных
	Вывести М+1 чисел - количество обходов для каждого участника
*/

//func factorial(n int) int {
//	factVal := 1
//	if n < 0 {
//		fmt.Print("Factorial of negative number doesn't exist.")
//	} else {
//		for i := 1; i <= n; i++ {
//			factVal *= i
//			//fmt.Println(factVal)
//		}
//	}
//
//	return factVal
//}

func prodtree(l, r int) int {
	if l > r {
		return 1
	}
	if l == r {
		return l
	}
	if r-l == 1 {
		return l * r
	}
	m := (l + r) / 2
	return prodtree(l, m) * prodtree(m+1, r)
}

func factorial(n int) int {
	if n < 0 {
		return 0
	}
	if n == 0 {
		return 1
	}
	if n == 1 || n == 2 {
		return n
	}
	return prodtree(2, n)
}

func MysteryShoppers(n, t []int, m int) []int {
	res := make([]int, m, m)
	wg := sync.WaitGroup{}
	wg.Add(m)
	for i := 0; i < m; i++ {
		go func(i int) {
			res[i] = factorial(n[i])
			wg.Done()
		}(i)
	}
	wg.Wait()

	for i := 0; i < m; i++ {
		res[i] = res[i] % t[i]
	}
	return res
}

func main() {
	m := 0
	fmt.Scan(&m)
	m++
	n := make([]int, m, m)
	t := make([]int, m, m)
	for i := 0; i < m; i++ {
		fmt.Scan(&n[i])
		fmt.Scan(&t[i])
	}

	for _, val := range MysteryShoppers(n, t, m) {
		fmt.Println(val)
	}
}
